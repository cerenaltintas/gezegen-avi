"""
Canlƒ± NASA verilerini test et - Model deƒüerlendirmesi ile
"""
import sys
sys.path.insert(0, '.')

import pandas as pd
import numpy as np
from pathlib import Path
import pickle

# Model ve scaler'ƒ± y√ºkle
print("=" * 70)
print("MODEL DEƒûERLENDƒ∞RME TESTƒ∞")
print("=" * 70)

try:
    with open('exoplanet_model.pkl', 'rb') as f:
        model = pickle.load(f)
    with open('scaler.pkl', 'rb') as f:
        scaler = pickle.load(f)
    with open('feature_names.pkl', 'rb') as f:
        feature_names = pickle.load(f)
    print("‚úì Model, scaler ve feature_names y√ºklendi")
except Exception as e:
    print(f"‚úó Model dosyalarƒ± y√ºklenemedi: {e}")
    sys.exit(1)

# NASA API'den veri al
try:
    from nasa_api import get_latest_dataframe
    from streamlit_app import score_catalog
    
    print("\n1Ô∏è‚É£ NASA API'den canlƒ± veri alƒ±nƒ±yor...")
    df = get_latest_dataframe(mission="kepler", limit=100, force_refresh=True)
    print(f"   ‚úì {len(df)} kayƒ±t alƒ±ndƒ±")
    
except Exception as e:
    print(f"   ‚úó HATA: {e}")
    sys.exit(1)

# Modelle deƒüerlendir
try:
    print("\n2Ô∏è‚É£ Model ile deƒüerlendiriliyor...")
    scoring = score_catalog(df, model, scaler, list(feature_names), anomaly_detector=None)
    scored_df = scoring["scored"]
    
    print(f"   ‚úì {len(scored_df)} obje skorlandƒ±")
    
    # ƒ∞statistikler
    if "model_prediction" in scored_df.columns and "model_probability" in scored_df.columns:
        predicted_exoplanets = scored_df[scored_df["model_prediction"] == "CONFIRMED"]
        predicted_non_exoplanets = scored_df[scored_df["model_prediction"] == "OTHER"]
        high_confidence = scored_df[scored_df["model_probability"] >= 0.9]
        medium_confidence = scored_df[scored_df["model_probability"].between(0.7, 0.9)]
        low_confidence = scored_df[scored_df["model_probability"] < 0.7]
        
        print(f"\n3Ô∏è‚É£ MODEL TAHMƒ∞N SONU√áLARI:")
        print(f"   ü™ê √ñtegezegen Tahmini: {len(predicted_exoplanets):,}")
        print(f"   ‚ùå √ñtegezegen Deƒüil: {len(predicted_non_exoplanets):,}")
        print(f"   üéØ Y√ºksek G√ºven (‚â•90%): {len(high_confidence):,}")
        print(f"   ‚ö° Orta G√ºven (70-90%): {len(medium_confidence):,}")
        print(f"   ‚ö†Ô∏è D√º≈ü√ºk G√ºven (<70%): {len(low_confidence):,}")
        
        # NASA etiketleri ile kar≈üƒ±la≈ütƒ±rma
        if "koi_disposition" in scored_df.columns:
            nasa_confirmed = scored_df[scored_df["koi_disposition"].str.upper() == "CONFIRMED"]
            nasa_candidate = scored_df[scored_df["koi_disposition"].str.upper() == "CANDIDATE"]
            
            print(f"\n4Ô∏è‚É£ NASA vs MODEL KAR≈ûILA≈ûTIRMASI:")
            print(f"   ‚úÖ NASA CONFIRMED: {len(nasa_confirmed):,}")
            
            if len(nasa_confirmed) > 0:
                model_agrees = nasa_confirmed[nasa_confirmed["model_prediction"] == "CONFIRMED"]
                agreement_rate = len(model_agrees) / len(nasa_confirmed) * 100
                print(f"   üéØ Model Uyumu: %{agreement_rate:.1f} ({len(model_agrees)}/{len(nasa_confirmed)})")
            
            if len(nasa_candidate) > 0:
                model_promotes = nasa_candidate[nasa_candidate["model_prediction"] == "CONFIRMED"]
                print(f"   üîç NASA CANDIDATE: {len(nasa_candidate):,}")
                print(f"   ‚¨ÜÔ∏è Model Terfi: {len(model_promotes):,} objeyi CONFIRMED olarak deƒüerlendirdi")
        
        # En y√ºksek g√ºvenle tahmin edilenler
        if len(predicted_exoplanets) > 0:
            print(f"\n5Ô∏è‚É£ EN G√úVEN ƒ∞Lƒ∞R √ñTEGEZEGEN TAHMƒ∞NLERƒ∞ (Top 5):")
            top_5 = predicted_exoplanets.nlargest(5, "model_probability")
            
            for idx, row in top_5.iterrows():
                name = row.get("kepoi_name", row.get("koi_name", f"Index {idx}"))
                prob = row["model_probability"]
                nasa_disp = row.get("koi_disposition", "N/A")
                period = row.get("koi_period", "N/A")
                prad = row.get("koi_prad", "N/A")
                
                print(f"   ‚Ä¢ {name}")
                print(f"     Model G√ºveni: %{prob*100:.1f}")
                print(f"     NASA Etiketi: {nasa_disp}")
                print(f"     Periyot: {period:.2f} g√ºn" if isinstance(period, (int, float)) else f"     Periyot: {period}")
                print(f"     Yarƒ±√ßap: {prad:.2f} R‚äï" if isinstance(prad, (int, float)) else f"     Yarƒ±√ßap: {prad}")
                print()
    
    print("=" * 70)
    print("‚úÖ TEST BA≈ûARILI!")
    print("=" * 70)
    
except Exception as e:
    print(f"   ‚úó HATA: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
